import type { NextPage } from 'next'
import React, { useState, useEffect } from 'react'
import Head from 'next/head'
import Link from 'next/link'
/* Images */
import Image from 'next/image'
import Waves1 from '../../public/img/landing/wave1.svg'

/* CSS */
import styles from '../../styles/Recipe.module.css'

/* Components */
import Header from '../../components/Header'
import Footer from '../../components/Footer'

/* Data */
import { recipes } from '../../data/recipes'

/* Material UI - icons */
import KitchenRoundedIcon from '@mui/icons-material/KitchenRounded';
import ListAltRoundedIcon from '@mui/icons-material/ListAltRounded';
import CircleRoundedIcon from '@mui/icons-material/CircleRounded';
import MarkUnreadChatAltRoundedIcon from '@mui/icons-material/MarkUnreadChatAltRounded';

interface Recipe {
    id: number;
    type: string;
    title: string;
    subtitle: string;
    img: string;
    ingredients: string[];
    proceso: string[];
    notas: string[];
}

const baseUrl = "/./img/recipes/";

//@ts-ignore
const Recipe = ({ id }) => {
    const [recipe, setRecipe] = useState<Recipe | undefined>(undefined);

    useEffect(() => {
        console.log(id)

        const recipe = recipes.find(recipe => recipe.id === parseInt(id))
        console.log(recipe)
        setRecipe(recipe);

    })

    return (
        <div>
        <Head>
            <title>Create Next App</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
            {/* Header */}
            <Header />

            {/* landing */}
            {/* wave */}
            <div className={styles.waves__container1}>
            <Image className={styles.wave1} src={Waves1} alt=""/>
            </div>

            {/* background image */}
            <div className={styles.title__container}>
                <h1 className={styles.title}>{recipe?.title}</h1>
            </div>

            <div className={styles.recipe__contaniner}>
              <div className={styles.recipe__img} style={{backgroundImage: `url(${baseUrl}${recipe?.img})`}}></div>
              <div className={styles.recipe__info}>
                <div className={styles.recipe__ingredients}>
                  <div className={styles.recipe__subtitle}>
                    <KitchenRoundedIcon className={styles.icon1} />
                    <h2>Ingredientes</h2>
                  </div>
                  <div>
                    {recipe?.ingredients.map(ingredient => (
                      <div className={styles.list__item}>
                        <CircleRoundedIcon className={styles.icon2} />
                        <p>{ingredient}</p>
                      </div>
                    ))}
                  </div>
                </div>
                <div className={styles.recipe__process}>
                  <div className={styles.recipe__subtitle}>
                    <ListAltRoundedIcon className={styles.icon1} />
                    <h2>Proceso</h2>
                  </div>
                  <div>
                    {recipe?.proceso.map(process => (
                      <div className={styles.list__item}>
                        <CircleRoundedIcon className={styles.icon2} />
                        <p>{process}</p>
                      </div>
                    ))}
                  </div>
                </div>
                {/* Notes */}
                {/* @ts-ignore */}
                {recipe?.notas.length > 0 && (
                    <div className={styles.notes__container}>
                      <div className={styles.recipe__subtitle}>
                        <MarkUnreadChatAltRoundedIcon className={styles.icon1} />
                        <h2>Notas</h2>
                      </div>
                      <div className={styles.notes__list}>
                        {recipe?.notas.map(nota => (
                          <div className={styles.notes__item}>
                            <CircleRoundedIcon className={styles.icon2} />
                            <p>{nota}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                )}
              </div>
            </div>

            
            


            {/* Footer */}
            <Footer />

        </main>

        <footer className={styles.footer}>
        
        </footer>
        </div>
    )
}

//@ts-ignore
export async function getStaticProps(ctx) {
  const id = ctx.params.id;

  return {
    props: {
      id,
    },
  };
}
export async function getStaticPaths() {
  return {
    paths: [// String variant:
      '/receta/[id]',
      // Object variant:
      { params: { id: 'id' } },
    ],
    fallback: true
  }
}

export default Recipe